<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://mybatis.org/schema/mybatis-spring
		http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/util  
        http://www.springframework.org/schema/util/spring-util-4.3.xsd">
		
	<context:component-scan base-package="novle" />
	<import resource="spring-redis.xml"/> 
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${dataSource.driverClassName}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />

		<!-- 初始化连接大小
		<property name="initialSize" value="${initialSize}" />
		连接池最大使用连接数量
		<property name="maxActive" value="${maxActive}" />
		连接池最大空闲 
		<property name="maxIdle" value="${maxIdle}" />
		连接池最小空闲
		<property name="minIdle" value="${minIdle}" />
		获取连接最大等待时间
		<property name="maxWait" value="${maxWait}" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />

		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		打开removeAbandoned功能
		<property name="removeAbandoned" value="${removeAbandoned}" />
		1800秒，也就是30分钟
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		关闭abanded连接时输出错误日志
		<property name="logAbandoned" value="${logAbandoned}" />

		监控数据库
		<property name="filters" value="${filters}" /> -->
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="novle.dao"/> 
	</bean>
	
	<!-- 配置sessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 声明式事务 -->
	<context:annotation-config />
	
	<!-- 使用注解的包路径 -->
	<context:component-scan base-package="novle">
		<context:exclude-filter type="regex" expression=".*controller$" />
    </context:component-scan>
    
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
	<!-- 定义事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- shiro配置  start -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="login.html"></property>
		<property name="unauthorizedUrl" value="403.html"></property>
		<property name="filterChainDefinitions">
			<value>
				/login.html = anon
				/login.do = anon
				<!-- /testRole.do = roles["admin"]
				/testRole1.do = roles["admin","admin1"]
				/testPerms.do = perms["user:select"]
				/testPerms1.do = perms["user:delete","user:update"] -->
				/testRole.do = roles["admin","admin1"]
				/testRole1.do = rolesOr["admin","admin1"]
				/* = authc
			</value>
		</property>
		<property name="filters">
			<util:map>
				<entry key="rolesOr" value-ref="rolesOrFilter" />
			</util:map>
		</property>
	</bean>
	
	<bean class = "admin.filter.RolesOrFilter" id="rolesOrFilter"/>
	
	<!-- 创建SecurityManager对象 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- 自定义realm -->
	<bean id="realm" class="realm.CustomerRealm">
	    <property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
	
	<!-- 加密配置 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!-- 加密算法 -->
		<property name="hashAlgorithmName" value="md5"></property>
		<!-- 加密次数 -->
		<property name="hashIterations" value="1"></property>
	</bean>
	
	<bean class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" id = "sessionManager">
		<property name="sessionDAO" ref="redisSessionDao" />
	</bean>
	
	<bean class="novle.session.RedisSessionDao" id="redisSessionDao"/>
	
	<!-- shiro配置  end -->
	
	 <!--转化json-->
      <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
              <list>
                 <!--json视图拦截器，读取到@ResponseBody的时候去配置它-->
                 <ref bean="mappingJacksonHttpMessageConverter"/>
             </list>
        </property>
     </bean>
     <!--json转化器，它可以将结果转化-->
     <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
         <property name="supportedMediaTypes">
            <list>
                 <value>application/json;charset=UTF-8</value>
            </list>
         </property>
    </bean>
	
</beans>